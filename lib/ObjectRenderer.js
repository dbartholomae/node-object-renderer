// Generated by CoffeeScript 1.7.1
(function() {
  (function(modules, factory) {
    var m;
    if (typeof define === 'function' && define.amd) {
      return define(modules, factory);
    } else {
      return module.exports = factory.apply(null, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          _results.push(require(m));
        }
        return _results;
      })());
    }
  })(['path', 'when', 'when/keys', 'consolidate'], function(pathLib, When, whenKeys, consolidate) {
    var ObjectRenderer;
    return ObjectRenderer = (function() {
      function ObjectRenderer(options) {
        var _base, _base1;
        this.options = options;
        if (this.options == null) {
          this.options = {};
        }
        if ((_base = this.options).basePath == null) {
          _base.basePath = "";
        }
        if ((_base1 = this.options).addExtensions == null) {
          _base1.addExtensions = true;
        }
      }

      ObjectRenderer.prototype.render = function(templates, values, callback) {
        var engine, key, keys, obj, path, promise, template;
        if (typeof values === 'function') {
          callback = values;
          values = null;
        }
        if (typeof templates !== "object") {
          throw new TypeError("templates should be an object, is " + typeof templates + " instead");
        }
        for (key in templates) {
          template = templates[key];
          if (typeof template === 'object') {
            keys = Object.keys(template);
            if (keys.length !== 1) {
              throw new TypeError(key + " should be of length 1");
            } else if (consolidate[keys[0]] == null) {
              throw new TypeError(keys[0] + " isn't a renderer engine supported by consolidate");
            }
          } else if (typeof template !== 'function') {
            throw new TypeError("templates should be an object of functions and template objects");
          }
        }
        obj = {};
        for (key in templates) {
          template = templates[key];
          obj[key] = typeof template === "object" ? ((function() {
            var _results;
            _results = [];
            for (engine in template) {
              path = template[engine];
              _results.push(When.promise((function(_this) {
                return function(resolve, reject) {
                  var templatePath;
                  templatePath = pathLib.join(_this.options.basePath, path + (_this.options.addExtensions ? "." + engine : ""));
                  return consolidate[engine](templatePath, values, function(err, content) {
                    if (err) {
                      return reject(err);
                    }
                    return resolve(content);
                  });
                };
              })(this)));
            }
            return _results;
          }).call(this))[0] : template(values);
        }
        promise = whenKeys.all(obj);
        if (callback) {
          return promise.done((function(result) {
            return callback(null, result);
          }), (function(err) {
            return callback(err);
          }));
        } else {
          return promise;
        }
      };

      return ObjectRenderer;

    })();
  });

}).call(this);
